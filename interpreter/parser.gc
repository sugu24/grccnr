#include "cinter.gh"

typedef struct Control Control;
struct Control {
    Node *node;
    Node *before;
};

Control *controls = NULL;
Func *funcs = NULL;
Func *now_func;

Var *locals = NULL;
Var *globals = NULL;

Typedef *typedefs = NULL;
Enum *enums = NULL;
Struct *structs = NULL;

int control = 0;
int str_num = 0;

Node *new_node(NodeKind kind) {
    Node *node = calloc(1, sizeof(Node));
    node->kind = kind;
    node->tok_str = token->str;
    return node;
}

Node *new_binary(NodeKind kind, Node *lhs, Node *rhs) {
    Node *node = new_node(kind);
    node->lhs = lhs;
    node->rhs = rhs;
    return node;
}

Node *new_num(long long int val) {
    Node *node = new_node(ND_NUM);
    node->val = val;
    return node;
}

Node *new_char(char *c) {
    Node *node = new_node(ND_CHAR);
    node->val = to_ascii(c);
    return node;
}

Typedef *new_typedef(VarType *type, char *name, int len) {
    Typedef *type_def = calloc(1, sizeof(Typedef));
    type_def->type = type;
    type_def->name = name;
    type_def->len = len;
    return type_def;
}

// typedef宣言された型名と一致する物があれば返す
VarType *get_typedefed_type() {
    Token *tok = consume_kind(TK_IDENT);
    Typedef *type_def;
    if (!tok)
        return NULL;

    for (type_def = typedefs; type_def; type_def = type_def->next) {
        if (tok->len == type_def->len &&
            !memcmp(tok->str, type_def->name, tok->len))
            return type_def->type;
    }

    // tokの意味はtypedefでないから戻してNULLを返す
    token = tok;
    return NULL;
}

// タグ名が定義されたstructならばStructを返す
Struct *get_struct(char *str, int len) {
    Struct *struct_p;
    for (struct_p = structs; struct_p; struct_p = struct_p->next) {
        if (len == struct_p->len && !memcmp(str, struct_p->name, len)) {
            return struct_p;
        }
    }
    return NULL;
}

// 引数でもらったStructからtokと同じメンバ変数のlvarを返す
Var *get_membar(Struct *struct_p, Token *tok) {
    Var *membar;
    for (membar = struct_p->membar; membar; membar = membar->next) {
        if (tok->len == membar->len &&
            !memcmp(tok->str, membar->name, tok->len))
            return membar;
    }
    return NULL;
}

Var *find_var(int local, Token *tok) {
    Var *var;
    // ローカル変数
    for (var = locals; var && local; var = var->next) {
        if (tok->len == var->len && !memcmp(tok->str, var->name, var->len))
            return var;
    }

    // グローバル変数
    for (var = globals; var && local > 1; var = var->next) {
        if (tok->len == var->len && !memcmp(tok->str, var->name, var->len))
            return var;
    }

    return NULL;
}

Func *find_func(char *name, int len) {
    Func *func;
    for (func = funcs; func; func = func->before) {
        if (func->type->len == len && !memcmp(func->type->name, name, len))
            return func;
    }
    
    if (now_func->type->len == len && !memcmp(now_func->type->name, name, len))
        return now_func;
    
    return NULL;
}

// enumのメンバ変数を返す
Node *find_enum_membar(Token *tok) {
    Enum *enum_p;
    EnumMem *membar;
    for (enum_p = enums; enum_p; enum_p = enum_p->next) {
        for (membar = enum_p->membar; membar; membar = membar->next) {
            if (tok->len == membar->len &&
                !memcmp(tok->str, membar->name, membar->len))
                return membar->num_node;
        }
    }

    return NULL;
}

// structのtypeを生成する
Struct *new_struct() {
    Struct *struct_p;
    Var *membar;
    Var *top_membar;
    Var *cur_membar;
    VarType *type;
    Token *tok;
    Typedef *typedef_;
    int offset;

    // タグ名があるか
    tok = consume_kind(TK_IDENT);
    if (tok && (struct_p = get_struct(tok->str, tok->len)))
        // 既に定義されたタグ名ならそれを返す
        return struct_p;

    // 新しいstructの生成
    struct_p = calloc(1, sizeof(Struct));
    if (tok) {
        struct_p->name = tok->str;
        struct_p->len = tok->len;
    }

    // structのメンバ変数ブロック開始
    if (!consume("{"))
        return struct_p;

    offset = -1;

    // declare_varの引数が0なのは
    // 初期化、typedef、structなしだから
    top_membar = cur_membar = calloc(1, sizeof(Var));
    while (type = new_var_type(0)) {
        while (1) {
            membar = declare_var(0, type);
            offset += get_stack_size(membar->type);
            membar->offset = offset;
            cur_membar->next = membar;
            cur_membar = membar;
            
            if (consume(",")) continue;
            else if (consume(";")) break;
            else error_at(token->str, "there is not ; after declare var");
        }
    }
    struct_p->membar = top_membar->next;

    // offsetを逆にする
    for (membar = top_membar; membar; membar = membar->next)
        membar->offset = offset - membar->offset;

    // structのメンバ変数ブロック終了
    expect("}");

    // 構造体定義されていたら登録
    if (tok) {
        // タグ名があるstructだから連結リストに追加
        struct_p->next = structs;
        structs = struct_p;

        // typedefで同じタグ名のものがあれたVarTypeを入れ替える
        for (typedef_ = typedefs; typedef_; typedef_ = typedef_->next)
            if (typedef_->type->ty == STRUCT && 
                typedef_->type->struct_p->len == struct_p->len &&
                !strncmp(typedef_->type->struct_p->name, struct_p->name, struct_p->len))
                typedef_->type->struct_p = struct_p;
    }

    return struct_p;
}

// enumを処理
Enum *new_enum() {
    Typedef *typedef_;
    Enum *enum_p;
    Token *tok;
    EnumMem *membar;
    EnumMem *last_membar;
    int val; // メンバの数字
    int sign;

    // タグ名があるか
    tok = consume_kind(TK_IDENT);
    if (tok && (enum_p = find_enum_membar(tok)))
        // 既に定義されたタグ名ならそれを返す
        return enum_p;
    
    // 新しいenumの生成
    enum_p = calloc(1, sizeof(Enum));
    if (tok) {
        enum_p->name = tok->str;
        enum_p->len = tok->len;
    }

    // enumのメンバ変数ブロック開始
    // または typedef enum name nameの形ならreturn
    if (!consume("{"))
        return enum_p;

    // enumのカッコ内の値をenumに追加
    last_membar = NULL;
    val = 0;
    while (tok = consume_kind(TK_IDENT)) {
        membar = calloc(1, sizeof(EnumMem));
        membar->name = tok->str;
        membar->len = tok->len;
        if (consume("=")) {
            if (consume("-"))
                sign = -1;
            else
                sign = 1;

            if (tok = consume_kind(TK_NUM))
                val = tok->val * sign;
            else
                error_at(token->str, "only number after enum member");
            
        }
        membar->num_node = new_node(ND_NUM);
        membar->num_node->val = val;
        membar->next = last_membar;
        last_membar = membar;
        expect(",");
        val++;
    }
    enum_p->membar = last_membar;

    // structのメンバ変数ブロック終了
    expect("}");

    // enum登録
    enum_p->next = enums;
    enums = enum_p;    
    
    // typedefで同じタグ名のものがあれたVarTypeを入れ替える
    for (typedef_ = typedefs; typedef_; typedef_ = typedef_->next)
        if (typedef_->type->ty == INT && 
            typedef_->type->enum_p->len == enum_p->len &&
            !strncmp(typedef_->type->enum_p->name, enum_p->name, enum_p->len))
            typedef_->type->enum_p = enum_p;
    
    return enum_p;
}

// ヒープ領域にコピーしてそれを指す
char *str_copy(Token *tok) {
    int i;
    int j = 0;
    char *temp = malloc(sizeof(char) * (tok->len + 1));
    for (i = 0; i < tok->len; i++) {
        temp[j] = to_ascii((tok->str + i));
        if (tok->str[i] == '\\') i++;
        j++;
    }
    temp[j] = '\0';
    return temp;
}

// ---------- type ---------- //
Type get_var_type() {
    if (consume_kind(TK_VOID))
        return VOID;
    else if (consume_kind(TK_INT))
        return INT;
    else if (consume_kind(TK_CHAR))
        return CHAR;
    else if (consume_kind(TK_LONG)) {
        if (consume_kind(TK_INT))
            return INT;
        else if (consume_kind(TK_LONG)) {
            if (consume_kind(TK_INT))
                return LONG_LONG_INT;
            else
                error_at(token->str, "long long int ?");
                
        } else 
            error_at(token->str, "long int or long long int ?");
            
    } else
        return 0;
}

// 変数の型を返す
VarType *new_var_type(int type) {
    Typedef *type_def;
    VarType *var_type;
    VarType *temp_type;
    Type ty;
    int typedef_type = 0;
    var_type = calloc(1, sizeof(VarType));
    
    // 型取得
    while (1) {
        if (consume_kind(TK_TYPEDEF))
            typedef_type = 1;
        else if (ty = get_var_type()) {
            if (var_type->ty)
                error_at(token->str, "型は一意に定めなければいけません");
            else if (type != 2 && ty == VOID)
                error_at(token->str, "void型は変数の型として指定できません");
            var_type->ty = ty;
        }
        else if (temp_type = get_typedefed_type()) {
            if (var_type->ty)
                error_at(token->str, "型は一意に定めなければいけません");
            var_type = temp_type;
        }
        else if (consume_kind(TK_STRUCT)) {
            if (var_type->ty)
                error_at(token->str, "型は一意に定めなければいけません");
            var_type->ty = STRUCT;
            var_type->struct_p = new_struct();
        } 
        else if (consume_kind(TK_ENUM)) {
            if (var_type->ty) 
                error_at(token->str, "型は一意に定めなければいけません"); 
            var_type->ty = INT;
            var_type->enum_p = new_enum();
        } else
            break;
    }

    // type=0 (arg) なら typedef_typeはないはず
    if (typedef_type && type == 0)
        error_at(token->str, "引数ではtypedef宣言できません");
    
    // 変数宣言なし
    if (!var_type->ty)
        return NULL;
            
    // typedef宣言ならtypdefefsにvarとtypedef名を加える
    if (typedef_type) {
        // ポインタ取得
        while (consume("*")) {
            temp_type = calloc(1, sizeof(VarType));
            temp_type->ty = PTR;
            temp_type->ptr_to = var_type;
            var_type = temp_type;
        }
        
        Token *name;
        if (!(name = consume_kind(TK_IDENT)))
            error_at(token->str, "typedef宣言での宣言後の名前を指定してください");

        type_def = new_typedef(var_type, name->str, name->len);
        type_def->next = typedefs;
        typedefs = type_def;
        expect(";");
        return NULL;
    } 
    else
        return var_type;
}

// RBPからのオフセットを設定
void set_offset(Var **var, int type) {
    int offset = get_stack_size((*var)->type);

    if (type == 2) {
        if (globals)
            (*var)->offset = globals->offset + offset;
        else
            (*var)->offset = offset - 1;
    } else {
        if (locals)
            (*var)->offset = locals->offset + offset;
        else
            (*var)->offset = offset - 1;
    }
}

// 変数の宣言 失敗なら途中でexitされる
// type: 0->arg 1->locals 2->globals
Var *declare_var(int type, VarType *var_type) {
    Token *tok;
    VarType *array_top;
    VarType *array_bfr;
    VarType *array_now;
    VarType *top_var_type;
    Var *var = calloc(1, sizeof(Var));
    Node *node;

    // ポインタ取得
    while (consume("*")) {
        top_var_type = calloc(1, sizeof(VarType));
        top_var_type->ty = PTR;
        top_var_type->ptr_to = var_type;
        var_type = top_var_type;
    }

    // 変数の型
    var->type = var_type;
    
    // 変数名
    tok = consume_kind(TK_IDENT);
    if (!tok) {
        if (var->type->ty == STRUCT || var->type->enum_p) {
            // structかつvar_nameがない -> structの定義だけ
            expect(";");
            return NULL;
        }
        error_at(token->str, "there is no val name");
    }

    if (find_var(type, tok))
        error_at(token->str, "declared val name");

    var->name = tok->str;
    var->len = tok->len;

    // 関数ならreturn グローバル変数なら var->glb_var = 1
    if (type == 2) {
        if (token_str("(")) 
            // 関数
            return var;
        else 
            // グローバル変数
            var->glb_var = 1;
    }

    // []?
    if (token_str("[")) {
        array_top = array_bfr = calloc(1, sizeof(VarType));
        while (consume("[")) {
            array_now = calloc(1, sizeof(VarType));
            array_now->ty = ARRAY;
            array_bfr->ptr_to = array_now;
            if (token_kind(TK_NUM)) {
                array_now->array_size = expect_number();
                if (array_now->array_size <= 0)
                    error_at(token->str, "配列のサイズは正の整数である必要があります");
            } 
            else if (tok = consume_kind(TK_IDENT)) {
                if (node = find_enum_membar(tok)) {
                    array_now->array_size = node->val;
                    if (array_now->array_size <= 0)
                        error_at(token->str, "array size must be plus.");                    
                } else
                    error_at(token->str, "unexpect : there is identification after [");
            }
            else if (array_bfr != array_top)
                error_at(token->str, "配列の要素数省略は最高次元の場合のみ可です");
                
            array_bfr = array_now;
            expect("]");
        }
        array_bfr->ptr_to = var->type;
        var->type = array_top->ptr_to;
    }

    // RBPからのオフセット
    if (var->type->ty != ARRAY || var->type->array_size) 
        set_offset(&var, type);

    return var;
}

void parser() {
    Func *f;
    Token *tok;
    while (!consume_kind(TK_EOF)) {
        tok = token;
        f = global();
        if (f) {
            f->before = funcs;
            funcs = f;
        } else if (tok == token)
            error_at(token->str, "can't procedure");
    }
}

Func *global() {
    Func *func;
    Var *var;
    VarType *temp;
    VarType *var_type;
    Node *node;

    var_type = new_var_type(2);
    if (!var_type)
        return NULL;

    var = declare_var(2, var_type);
    if (!var)
        return NULL; // typedef struct enum
    if (consume("(")) {
        if (var_type->ty == ARRAY)
            error_at(token->str, "function type must not array");
        
        // funcの初期化
        func = calloc(1, sizeof(Func));
        func->type = var;

        // localsの初期化とfuncのローカル変数初期化
        locals = NULL;
        while (!consume(")")) {
            if (var_type = new_var_type(0)) {
                var = declare_var(0, var_type);
                if (!var)
                    error_at(token->str, "is not var name");

                while (temp->ty == ARRAY) {
                    temp->ty = PTR;
                    temp->array_size = 0;
                    temp = temp->ptr_to;
                }

                var->next = locals;
                locals = var;

                if (consume(","))
                    continue;
                else if (consume(")"))
                    break;
                else
                    error_at(token->str, " , or ) after var tail");
            }
            else 
                error_at(token->str, "don't declare argument");
        }
        now_func = func;
        func->args = locals;
        controls = NULL;
        expect("{");
        func->stmt = func_stmt();
        func->locals = locals;
        return func;
    } 
    // グローバル変数
    else {
        while (1) {
            if (consume("=")) {
                if (!(node = initialize(var, 2)))
                    error_at(token->str, "there is not initialization after =");

                while (node && ((node->rhs->kind == ND_DEREF && node->rhs->lhs->kind == ND_LVAR && node->rhs->lhs->var->glb_var) ||
                        node->rhs->kind == ND_NUM || node->rhs->kind == ND_STR || node->rhs->kind == ND_CHAR)) {
                    execute_cal(node);
                    node = node->next_stmt;
                }

                if (node) 
                    error_at(token->str, "initializer element is not constant");
            }

            // voidかたはNG
            if (var->type->ty == VOID)
                error_at(token->str, "void type is not able to declare");

            // 連結リスト構築
            var->next = globals;
            globals = var;
            if (consume(";")) break;
            else if (consume(",")) continue;
            else error_at(token->str, "there is not ; after var declared");
        }
        return NULL;
    }
}

Node *func_stmt() {
    Node *head_node;
    Node *cur_node;
    Node *node;
    Var *var;
    VarType *var_type;

    head_node = cur_node = calloc(1, sizeof(Node));
    while (1) {
        if (var_type = new_var_type(1)) {
            while (1) {
                var = declare_var(1, var_type);
                if (consume("=")) {
                    cur_node->next_stmt = initialize(var, 1);
                    while (cur_node->next_stmt) cur_node = cur_node->next_stmt;
                }
                var->next = locals;
                locals = var;

                if (consume(",")) continue;
                else if (consume(";")) break;
                else error_at(token->str, "there is not ; after declare var");
            }
        } else {
            if (!(node = stmt(cur_node))) {
                if (!controls) break;
                else continue;
            }
            cur_node->next_stmt = node;
            while (cur_node->next_stmt) cur_node = cur_node->next_stmt;
        }
    }
    return head_node;
}

// l->r, m->l
void set_jump_to(Node *l, Node *m, Node *r) {
    l->jump_to = r;
    r->jumped_from = l;
    if (l->kind != ND_FOR && l->kind != ND_WHILE) return;
    m->jump_to = l;
    l->jumped_from = m;
}

Node *stmt(Node *cur_node) {
    Node *node = NULL;
    Node *block_node;
    Node *end_node;
    Var *var;
    Control *c;

    if (consume("{")) {
        c = calloc(1, sizeof(Control));
        c->node = new_node(ND_BLOCK);
        c->before = controls;
        controls = c;
        return c->node;
    } 
    else if (consume("}")) {
        node = new_node(ND_BLOCK_END);
        
        if (!controls)
            return NULL;
        else if (controls->node->kind != ND_BLOCK)
            error_at(token->str, "対応する } がありません");

        controls = controls->before;

        block_node = node;

        while (controls && controls->node->kind != ND_BLOCK) {
            end_node = new_node(ND_CONTROL_END);
            set_jump_to(controls->node, block_node, end_node);
            controls = controls->before;
            node->next_stmt = end_node;
            block_node = end_node;
        }

        return node;        
    }
    else if (consume_kind(TK_WHILE)) {
        c = calloc(1, sizeof(Control));
        node = new_node(ND_WHILE);
        c->node = node;
        expect("(");
        node->lhs = expr();
        expect(")");
        
        c->before = controls;
        controls = c;
        return node;
    }
    else if (consume_kind(TK_FOR)) {
        c = calloc(1, sizeof(Control));
        node = new_node(ND_FOR_START);
        node->next_stmt = new_node(ND_FOR);
        c->node = node->next_stmt;
        expect("(");
        node->next_stmt->lhs = expr();
        expect(";");
        node->next_stmt->mhs = expr();
        expect(";");
        node->next_stmt->rhs = expr();
        expect(")");
        
        c->before = controls;
        controls = c;
        return node;
    }
    else if (consume_kind(TK_IF)) {
        c = calloc(1, sizeof(Control));
        node = new_node(ND_IF);
        c->node = node;
        expect("(");
        node->lhs = expr();
        expect(")");

        c->before = controls;
        controls = c;
        return node;
    }
    else if (consume_kind(TK_ELSE)) {
        if (cur_node && cur_node->kind == ND_CONTROL_END && 
            (cur_node->jumped_from->kind == ND_IF || cur_node->jumped_from->kind == ND_ELSE_IF)) {
            if (consume_kind(TK_IF)) {
                node = new_node(ND_ELSE_IF);
                expect("(");
                node->lhs = expr();
                expect(")");
            } 
            else
                node = new_node(ND_ELSE);
                
            cur_node->jumped_from->next_if_else = node;

            c = calloc(1, sizeof(Control));
            c->node = node;

            c->before = controls;
            controls = c;
            return node;
        } else
            error_at(token->str, "else が予期しない場所にあります");
    }
    else if (consume_kind(TK_SWITCH)) {
        c = calloc(1, sizeof(Control));
        node = new_node(ND_SWITCH);
        c->node = node;
        expect("(");
        node->lhs = expr();
        expect(")");

        c->before = controls;
        controls = c;
        return node;
    }
    else if (consume_kind(TK_CASE)) {
        c = controls;
        while (c) {
            if (c->node->kind == ND_SWITCH)
                break;
            c = c->before;
        }
        if (!c)
            error_at(token->str, "caseがswitch文の中に来ていません");

        node = new_node(ND_CASE);
        node->lhs = expr();
        expect(":");
        
        if (node->lhs->kind != ND_NUM && node->lhs->kind != ND_CHAR)
            error_at(token->str, "caseで指定する値は定数である必要があります");

        end_node = c->node;
        while (end_node->next_if_else) end_node = end_node->next_if_else;
        end_node->next_if_else = node;
        return node;
    }
    else if (consume_kind(TK_DEFAULT)) {
        c = controls;
        while (c) {
            if (c->node->kind == ND_SWITCH)
                break;
            c = c->before;
        }
        if (!c)
            error_at(token->str, "caseがswitch文の中に来ていません");

        node = new_node(ND_DEFAULT);
        expect(":");
        
        end_node = c->node;
        while (end_node->next_if_else) end_node = end_node->next_if_else;
        end_node->next_if_else = node;
        return node;
    }
    else if (consume_kind(TK_RETURN)) {
        node = new_node(ND_RETURN);
        node->lhs = expr();
        if (!returnable(now_func->type->type, AST_type(1, node->lhs)))
            error_at(token->str, "戻り値が一致しません");

        block_node = node;

        while (controls && controls->node->kind != ND_BLOCK) {
            end_node = new_node(ND_CONTROL_END);
            set_jump_to(controls->node, block_node, end_node);
            controls = controls->before;
            node->next_stmt = end_node;
            block_node = end_node;
        }
    }
    else if (consume_kind(TK_CONTINUE)) {
        node = new_node(ND_CONTINUE);
        for (c = controls; c; c = c->before) {
            if (c->node->kind == ND_FOR || c->node->kind == ND_WHILE) {
                node->jump_to = c->node;
                break;
            }
        }

        if (!node->jump_to)
            error_at(token->str, "continueはloop内で使用してください");

        block_node = node;

        while (controls && controls->node->kind != ND_BLOCK) {
            end_node = new_node(ND_CONTROL_END);
            set_jump_to(controls->node, block_node, end_node);
            controls = controls->before;
            node->next_stmt = end_node;
            block_node = end_node;
        }
    }
    else if (consume_kind(TK_BREAK)) {
        node = new_node(ND_BREAK);
        c = controls;

        for (; c; c = c->before) {
            if (c->node->kind == ND_FOR || c->node->kind == ND_WHILE || c->node->kind == ND_SWITCH) {
                node->break_to = &(c->node->jump_to);
                break;
            }
        }

        if (!node->break_to)
            error_at(token->str, "breakはloop内で使用してください");

        block_node = node;

        while (controls && controls->node->kind != ND_BLOCK) {
            end_node = new_node(ND_CONTROL_END);
            set_jump_to(controls->node, block_node, end_node);
            controls = controls->before;
            node->next_stmt = end_node;
            block_node = end_node;
        }
    }
    else {
        node = expr();
        block_node = node;

        while (controls && controls->node->kind != ND_BLOCK) {
            end_node = new_node(ND_CONTROL_END);
            set_jump_to(controls->node, block_node, end_node);
            controls = controls->before;
            node->next_stmt = end_node;
            block_node = end_node;
        }
    }
    expect(";");
    return node;
}

Node *expr() {
    Node *node = assign();
    AST_type(1, node);
    return node;
}

Node *assign() {
    Node *node = Ladd();
    
    if (consume("=")) 
        node = new_binary(ND_ASSIGN, node, assign());
    else if (consume("+="))
        node = new_binary(ND_ASSIGN, node, new_binary(ND_ADD, node, assign()));
    else if (consume("-="))
        node = new_binary(ND_ASSIGN, node, new_binary(ND_SUB, node, assign()));
    else if (consume("*="))
        node = new_binary(ND_ASSIGN, node, new_binary(ND_MUL, node, assign()));
    else if (consume("/="))
        node = new_binary(ND_ASSIGN, node, new_binary(ND_DIV, node, assign()));
    else if (consume("%="))
        node = new_binary(ND_ASSIGN, node, new_binary(ND_MOD, node, assign()));
    return node;
}

Node *Ladd() {
    Node *node = Land();
    
    while(1) {
        if (consume("||")) 
            node = new_binary(ND_LOGICAL_ADD, node, Ladd());
        else
            return node;
    }
}

Node *Land() {
    Node *node = equality();
    
    while(1) {
        if (consume("&&"))
            node = new_binary(ND_LOGICAL_AND, node, Land());
        else
            return node;
    }
}

Node *equality() {
    Node *node = relational();
    
    while(1) {
		if (consume("=="))
			node = new_binary(ND_EQ, node, relational());
		else if (consume("!="))
			node = new_binary(ND_NE, node, relational());
		else
			return node;
	}
}

Node *relational() {
    Node *node = add();
    
    while(1) {
		if (consume("<"))
			node = new_binary(ND_LT, node, add());
		else if (consume("<="))
			node = new_binary(ND_LE, node, add());
		else if (consume(">"))
			node = new_binary(ND_LT, add(), node);
		else if (consume(">="))
			node = new_binary(ND_LE, add(), node);
		else
			return node;
	}
}

Node *add() {
    Node *node = mul();

    while (1) {
        if (consume("+"))
            node = new_binary(ND_ADD, node, mul());
        else if (consume("-"))
            node = new_binary(ND_SUB, node, mul());
        else
            return node;
    }
}

Node *mul() {
    Node *node = unary();

    while (1) {
        if (consume("*"))
            node = new_binary(ND_MUL, node, unary());
        else if (consume("/"))
            node = new_binary(ND_DIV, node, unary());
        else if (consume("%"))
            node = new_binary(ND_MOD, node, unary());
        else
            return node;
    }
}

Node *sizeof_val() {
    VarType *var_type;
    Token *tok = token;

    // sizeof(int,struct ...) or sizeof(変数)に対応
    if (consume("(")) {
        if (var_type = new_var_type(0)) {
            expect(")");
            return new_num(get_stack_size(var_type));
        }
    }
    token = tok;
    Node *node = unary();
    if (node->kind == ND_STR_PTR)
        node->kind = ND_STR;
    
    return new_num(get_size(AST_type(1, node)));
}

Node *unary() {
    Node *node;

    if (consume("+"))
        return unary();
    else if (consume("-"))
        return new_binary(ND_SUB, new_num(0), unary());
    else if (consume("!"))
        return new_binary(ND_NOT, unary(), NULL);
    else if (consume("*")) 
        return new_binary(ND_DEREF, unary(), NULL);
    else if (consume("&")) {
        node = primary();
        if (node->kind == ND_LVAR || 
            node->kind == ND_INDEX) {
            return new_binary(ND_ADDR, node, NULL);
        } else
            error_at(token->str, "only var after &");
    }
    else if (consume_kind(TK_SIZEOF)) 
        return sizeof_val();
    return primary();
}

Node *primary() {
    Token *tok;
    Node *node;
    Node *arg;
    Node *args;
    Node *args_head;
    int argc;
    VarType *cast;

    while (consume("(")) {
        if (cast = new_var_type(0)) {
            expect(")");
            node = new_node(ND_CAST);
            node->cast = cast;
            node->lhs = primary();
            return node;
        } else {
            node = assign();
            expect(")");
            return attach(node);
        }
    }

    if (tok = consume_kind(TK_IDENT)) {
        if (consume("(")) {
            // 関数の場合
            if (tok->len == 6 && !memcmp(tok->str, "printf", tok->len))
                node = new_node(ND_PRINTF);
            else if (tok->len == 5 && !memcmp(tok->str, "scanf", tok->len))
                node = new_node(ND_SCANF);
            else if (tok->len == 6 && !memcmp(tok->str, "calloc", tok->len))
                node = new_node(ND_CALLOC);
            else if (tok->len == 6 && !memcmp(tok->str, "malloc", tok->len))
                node = new_node(ND_MALLOC);
            else if (tok->len == 4 && !memcmp(tok->str, "free", tok->len))
                node = new_node(ND_FREE);
            else {
                node = new_node(ND_CALL_FUNC);
                node->func = find_func(tok->str, tok->len);
                if (!node->func)
                    error_at(token->str, "there is not function that name");
                node->type = node->func->type->type;
            }
            
            args_head = args = calloc(1, sizeof(Node));
            argc = 0;
            if (!consume(")")) {
                while (1) {
                    if (!(arg = expr()))
                        error_at(token->str, "関数の呼び出し元の引数が処理できません");

                    args->next_stmt = arg;
                    args = arg;
                    argc++;
                    
                    if (consume(",")) {}
                    else if (consume(")")) break;
                    else error_at(token->str, "関数の呼び出し元の引数の次が処理できません");
                }
            }
            node->args = args_head;
            node->argc = argc;
        }
        else {
            if (node = find_enum_membar(tok))
                return node;

            node = new_node(ND_LVAR);
            if (!(node->var = find_var(3, tok)))
                error_at(token->str, "there is no var this name");
        }
        
        node = attach(node);
        node = addadd_minusminus(node);
    }
    else if (tok = consume_kind(TK_NUM))
        node = new_num(tok->val);
    else if (tok = consume_kind(TK_STR)) {
        node = new_node(ND_STR_PTR);
        node->str = str_copy(tok);
    } else if (tok = consume_kind(TK_ONE_CHAR)) {
        node = new_node(ND_CHAR);
        node->val = to_ascii(tok->str);
    } else if (tok = consume_kind(TK_NULL)) {
        node = new_node(ND_NULL);
    }

    return node;
}

Node *addadd_minusminus(Node *node) {
    if (consume("++"))
        node = new_binary(ND_VAR_ADD, node, NULL);
    else if (consume("--"))
        node = new_binary(ND_VAR_SUB, node, NULL);
    return node;
}

Node *attach(Node *node) {
    Node *mem_node;
    Var *var;
    Token *tok;
    VarType *type = AST_type(0, node);
    
    // (assign), ->membar, .membar, [assign] の繰り返し
	while (1) {
        if (consume("[")) {
            if (type->ty != PTR && type->ty != ARRAY)
                error_at(token->str, "配列またはポインタ以外に添え字が付けられています");
            
            type = type->ptr_to;
            node->access = 1;
            node = new_binary(ND_INDEX, node, new_binary(ND_MUL, new_num(get_stack_size(type)), assign()));
            expect("]");
        }
        else if (consume(".")) {
            if (type->ty != STRUCT)
                error_at(token->str, "左の候がstructでははありません");
            if (!(tok = consume_kind(TK_IDENT))) 
                error_at(token->str, "メンバ変数である必要があります");
            if (!(var = get_membar(type->struct_p, tok)))
                error_at(token->str, "メンバ変数である必要があります");
                
            node->access = 1;
            mem_node = new_node(ND_MEMBAR);
            mem_node->var = var;
            node = new_binary(ND_MEMBAR_ACCESS, node, mem_node);
            type = var->type;
        }
        else if (consume("->")) {
            if (type->ty != PTR || type->ptr_to->ty != STRUCT) 
                error_at(token->str, "左の候がstructのポインタではありません");
            if (!(tok = consume_kind(TK_IDENT)))
                error_at(token->str, "メンバ変数である必要があります");
            if (!(var = get_membar(type->ptr_to->struct_p, tok))) 
                error_at(token->str, "メンバ変数である必要があります");
            node->access = 1;
            mem_node = new_node(ND_MEMBAR);
            mem_node->var = var;
            node = new_binary(ND_DEREF, node, NULL);
            node = new_binary(ND_MEMBAR_ACCESS, node, mem_node);
            type = var->type;
            if (type->ty == PTR && type->ptr_to->ty == STRUCT)
                type->ptr_to->struct_p = get_struct(type->ptr_to->struct_p->name, type->ptr_to->struct_p->len);
        }
        else
            break;        
    }
    return node;
}