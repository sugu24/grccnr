#include "cinter.gh"

enum MemoryInfo {
    GLB  = 3000000,
    LCL  = 2000000,
    HEAP = 1000000,
    TEXT = 1000000,
};

long long int stack[GLB];
char Text[TEXT];
long long int stack_address = &stack;
long long int text_address = &Text;
int stack_size = GLB;
int text_size = TEXT;

int RSP = LCL - 1;
int RBP = LCL - 1;

long long int stack_pop() {
    long long int ret;
    if (RSP == LCL) {
        printf("RSPが0の状態でpopしようとしています\n");
        exit(1);
    }
    RSP++;
    // printf("pop RSP = %d -> %lld %.10s\n", RSP, stack[RSP], exec_node->tok_str);
    return stack[RSP];
}

void stack_push(long long int val) {
    if (RSP == HEAP) {
        printf("RSPPがstack_sizeを超えます\n");
        exit(1);
    }
    // printf("push RSP = %d <- %lld %.10s\n", RSP, val, exec_node->tok_str);
    stack[RSP--] = val;
}

long long int *get_stack_addr(int is_global_var, long long int offset) {
    if (is_global_var)
        offset = GLB - offset - 1;
    else
        offset = RBP - offset;
        
    if (offset < 0 || GLB < offset)
        error_at(exec_node->tok_str, "segmentation fault");
    
    return &stack[offset];
}

long long int stack_text_get(long long int offset, Type type) {
    if (offset >= text_address && text_address + text_size > offset)
        return Text[offset - text_size];
    else if (offset >= stack_address && stack_address + stack_size * 8 >= offset)
        if (type == CHAR) {
            int bit_offset = 8 * ((offset - stack_address) % 8);
            long long int massking = (long long int) 255 << bit_offset;
            //printf("get %d %d %d\n", (offset-stack_address)/8, bit_offset, massking);
            return (stack[(offset - stack_address) / 8] & massking) >> bit_offset;
        } else
            return stack[(offset - stack_address) / 8];
    else 
        error_at(exec_node->tok_str, "segmentation fault");
    // print_local_stack(5);
}

void stack_set(long long int offset, long long int val, Type type) {
    if (offset >= text_address && text_address + text_size > offset)
        error_at(exec_node->tok_str, "Character literals cannot be changed");
    else if (offset >= stack_address && stack_address + stack_size * 8 >= offset) {      
        if (type == CHAR) {
            int bit_offset = 8 * ((offset - stack_address) % 8);
            long long int massking = ~((long long int) 255 << bit_offset);
            long long int filter = (long long int) val << bit_offset;
            //printf("set %d %d %d %d %d\n", (offset-stack_address)/8, val, (offset-stack_address)%8, bit_offset, massking);
            stack[(offset - stack_address) / 8] = (stack[(offset - stack_address) / 8] & massking) | filter;
            // printf("%lld %lld\n", filter, stack[(offset-stack_address)/8]);
        } else
            stack[(offset - stack_address) / 8] = val;
    } else
        error_at(exec_node->tok_str, "segmentation fault");
    // print_local_stack(5);
}

void stack_malloc(int size) {
    RSP -= size + 1;
    
    if (RSP < 0) {
        printf("RSPがstack_sizeを超えてしまいます\n");
        exit(1);
    }
}

void call_func_stack() {
    stack[RSP--] = RBP;
    RBP = RSP;
}

void ret_func_stack() {
    RSP = RBP + 1;
    RBP = stack[RSP];
}

int TEXT_RSP = 0;
void text_malloc(int size) {
    if (TEXT_RSP + size >= TEXT) {
        error_at(token->str, "TEXT領域の上限を超えました.\n");
        exit(1);
    }
}

long long int *write_text(char *str, int len) {
    int i; 
    long long int *res = &Text[TEXT_RSP];
    for (i = 0; i < len; i++) {
        Text[TEXT_RSP] = to_ascii(str);
        if (*str == '\\') { len--; str++; }
        str++;
        TEXT_RSP++;
    }
    Text[TEXT_RSP] = 0;
    TEXT_RSP++;
    return res;
}

void print_local_stack(int len) {
    int i;
    printf("       stack dump       \n");
    for (i = 1; i <= len; i++)
        printf(" %lld : %lld\n", &stack[LCL-i], stack[LCL-i]);
}

void print_global_stack(int len) {
    int i;
    printf("       global dump       \n");
    for (i = 1; i <= len; i++)
        printf(" %lld : %lld\n", &stack[GLB-i], stack[GLB-i]);
}

void print_heap_stack(int len) {
    int i;
    printf("       heap dump       \n");
    for (i = 0; i < len; i++)
        printf(" %lld : %lld\n", &stack[i], stack[i]);
}

// ---------------------- heap領域 ---------------------- //
int heap_head;
int heap_tail;
enum {
    NOT_FOUND = -10,
    NEXT_BLOCK = 1,
    TAIL_BLOCK = -2,
    NONE_BEFORE = -3,
};

void init_memory() {
    stack[0] = HEAP + 1;
    stack[NEXT_BLOCK] = TAIL_BLOCK;
    heap_head = 0;
    heap_tail = 0;
}

int best_fit(int size) {
    // size+1以上で最もサイズが小さいoffsetを返す
    int current_offset = heap_head;
    int before_offset = NONE_BEFORE;
    int best_size = GLB;
    int current_size;
    int before_best_offset = NOT_FOUND;

    while (current_offset != TAIL_BLOCK) {
        current_size = stack[heap_head];
        if (current_size > size && best_size > current_size) {
            before_best_offset = before_offset;
            best_size = current_size;
        }

        before_offset = current_offset;
        current_offset = stack[current_offset + NEXT_BLOCK];
    }

    return before_best_offset;
}

long long int *heap_alloc(int size) {
    int before_offset;
    int found_offset;
    
    before_offset = best_fit(size);
    if (before_offset == NOT_FOUND) {
        printf("heap area is fulled\n");
        exit(1);
    } else {
        if (before_offset == NONE_BEFORE) {
            // beforeがなかった場合
            found_offset = heap_head;
            // found_offsetにsize+1を確保して(全てとるかも判断)next_offsetを返す
            heap_head = do_alloc(found_offset, size); 
        } else {
            // beforeがあった場合
            found_offset = stack[before_offset + NEXT_BLOCK];
            stack[before_offset + NEXT_BLOCK] = do_alloc(found_offset, size);
        }
    }
    
    if (before_offset == heap_tail)
        heap_tail = stack[before_offset + NEXT_BLOCK];
    
    // stack[found_offset]には確保したsizeが入っている
    return &stack[found_offset+1];
}

int do_alloc(int found_offset, int size) {
    int next_offset;
    
    if (stack[found_offset] > size+1+2) {
        next_offset = found_offset + (size + 1);
        stack[next_offset + NEXT_BLOCK] = stack[found_offset + NEXT_BLOCK];
        stack[next_offset] = stack[found_offset] - (size + 1);
        stack[found_offset] = size + 1;
    } else {
        next_offset = stack[found_offset + NEXT_BLOCK];
        // stack[found_offset]にすでにsizeが格納されている
    }

    if (found_offset == heap_tail)
        heap_tail = next_offset;
        
    return next_offset;
}

void dealloc(long long int free_address) {
    int free_offset;
    
    free_offset = (free_address - stack_address) / 8;
    stack[heap_tail + NEXT_BLOCK] = free_offset - 1;
    heap_tail = free_offset - 1;
    stack[free_offset] = TAIL_BLOCK;
}