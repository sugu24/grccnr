#include "cinter.gh"

enum MemoryInfo {
    GLB  = 2999999,
    LCL  = 1999999,
    HEAP = 999999,
    TEXT = 1000000,
};

long long int stack[GLB];
char text[TEXT];
long long int stack_address = &stack;
long long int text_address = &text;
int stack_size = GLB;
int text_size = TEXT;

int RSP = LCL;
int RBP = LCL;

long long int stack_pop() {
    long long int ret;
    if (RSP == LCL) {
        printf("RSPが0の状態でpopしようとしています\n");
        exit(1);
    }
    RSP++;
    return stack[RSP];
}

void stack_push(long long int val) {
    if (RSP == HEAP) {
        printf("RSPPがstack_sizeを超えます\n");
        exit(1);
    }
    stack[RSP--] = val;
}

long long int *get_stack_addr(int is_global_var, long long int offset) {
    if (is_global_var)
        offset = GLB - offset;
    else
        offset = RBP - offset;
        
    if (offset < 0 || GLB <= offset) {
        printf("memoryのindexがstack_sizeを超えています1\n");
        exit(1);
    }
    // printf("addr %lld %lld\n", offset, &stack[offset]);
    return &stack[offset];
}

long long int stack_text_get(long long int offset) {
    if (offset >= text_address && text_address + text_size > offset)
        return text[offset - text_size];
    else if (offset >= stack_address && stack_address + stack_size * 8 > offset)
        return stack[(offset - stack_address) / 8];
    else 
        error_at(exec_node->tok_str, "memoryのindexがstack_sizeを超えています2\n");
}

void stack_set(long long int offset, long long int val) {
    if (offset >= text_address && text_address + text_size > offset)
        error_at(exec_node->tok_str, "can't write at text area");
    else if (offset >= stack_address && stack_address + stack_size * 8 > offset)
        stack[(offset - stack_address) / 8] = val;
    else 
        error_at(exec_node->tok_str, "memoryのindexがstack_sizeを超えています3\n");
}

void stack_malloc(int size) {
    RSP -= size + 1;

    if (RSP < 0) {
        printf("RSPがstack_sizeを超えてしまいます\n");
        exit(1);
    }
}

void call_func_stack() {
    stack[RSP--] = RBP;
    RBP = RSP;
}

void ret_func_stack() {
    RSP = RBP + 1;
    RBP = stack[RSP];
}

void print_local_stack(int len) {
    int i;
    for (i = 0; i < len; i++)
        printf(" %lld : %lld\n", &stack[LCL-i], stack[LCL-i]);
}

void print_global_stack(int len) {
    int i;
    for (i = 0; i < len; i++)
        printf(" %lld : %lld\n", &stack[GLB-i], stack[GLB-i]);
}

void print_heap_stack(int len) {
    int i;
    for (i = 0; i < len; i++)
        printf(" %lld : %lld\n", &stack[HEAP-i], stack[HEAP-i]);
}

// ---------------------- heap領域 ---------------------- //
int heap_head;
int heap_tail;
enum {
    NOT_FOUND = -10,
    NEXT_BLOCK = -1,
    TAIL_BLOCK = -2,
    NONE_BEFORE = -3,
};

void init_memory() {
    stack[HEAP] = HEAP + 1;
    stack[HEAP + NEXT_BLOCK] = TAIL_BLOCK;
    heap_head = HEAP;
    heap_tail = HEAP;
}

int best_fit(int size) {
    // size+1以上で最もサイズが小さいoffsetを返す
    int current_offset = heap_head;
    int before_offset = NONE_BEFORE;
    int best_size = GLB;
    int current_size;
    int before_best_offset = NOT_FOUND;

    while (current_offset != TAIL_BLOCK) {
        current_size = stack[heap_head];
        if (current_size > size && best_size > current_size) {
            before_best_offset = before_offset;
            best_size = current_size;
        }

        before_offset = current_offset;
        current_offset = stack[current_offset + NEXT_BLOCK];
    }

    return before_best_offset;
}

long long int *heap_alloc(int size) {
    int before_offset;
    int found_offset;

    before_offset = best_fit(size);

    if (before_offset == NOT_FOUND) {
        printf("heap area is fulled\n");
        exit(1);
    } else {
        if (before_offset == NONE_BEFORE) {
            // beforeがなかった場合
            found_offset = heap_head;
            // found_offsetにsize+1を確保して(全てとるかも判断)next_offsetを返す
            heap_head = do_alloc(found_offset, size); 
        } else {
            // beforeがあった場合
            found_offset = stack[before_offset + NEXT_BLOCK];
            stack[before_offset + NEXT_BLOCK] = do_alloc(found_offset, size);
        }
    }
    
    if (before_offset == heap_tail)
        heap_tail = stack[before_offset + NEXT_BLOCK];
    // stack[found_offset]には確保したsizeが入っている
    return &stack[found_offset-1];
}

int do_alloc(int found_offset, int size) {
    int next_offset;

    if (stack[found_offset] > size+1+2) {
        next_offset = found_offset - (size + 1);
        stack[next_offset + NEXT_BLOCK] = stack[found_offset + NEXT_BLOCK];
        stack[next_offset] = stack[found_offset] - (size + 1);
        stack[found_offset] = size + 1;
    } else {
        next_offset = stack[found_offset + NEXT_BLOCK];
        // stack[found_offset]にすでにsizeが格納されている
    }

    if (found_offset == heap_tail)
        heap_tail = next_offset;
        
    return next_offset;
}

void dealloc(long long int free_address) {
    int free_offset;
    
    free_offset = (free_address - stack_address) / 8;
    stack[heap_tail + NEXT_BLOCK] = free_offset + 1;
    heap_tail = free_offset + 1;
    stack[free_offset] = TAIL_BLOCK;
}