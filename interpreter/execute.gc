#include "cinter.gh"

typedef struct ControlInfo ControlInfo;

struct ControlInfo {
    ControlInfo *before;
    Node *node;
    int loop;
    int true;
};

Node *exec_node;
ControlInfo *control_infos = NULL;

// nodeからRBPからのoffsetを返す
void get_offset(Node *node) {
    long long int a;
    long long int b;
    long long int p;

    switch (node->kind) {
        case ND_LVAR:
            p = (long long int)get_addr(node->var->glb_var, node->var->offset);
            break;
        case ND_DEREF:
            execute_cal(node->lhs);
            p = stack_pop();
            break;
        case ND_INDEX:
            execute_cal(node->lhs);
            execute_cal(node->rhs);
            b = stack_pop();
            a = stack_pop();
            p = a + b * 8;
            // printf("offset %lld %lld", b, a);
            break;
        case ND_MEMBAR_ACCESS:
            execute_cal(node->lhs);
            execute_cal(node->rhs);
            b = stack_pop();
            a = stack_pop();
            p = a + b;
            break;
        default:
            error_at(exec_node->tok_str, "error in interpreter");
    }
    stack_push(p);
}

void delete_control_infos() {
    ControlInfo *info;
    info = control_infos;
    control_infos = control_infos->before;
    free(info);
}

void execute_main() {
    Func *func = find_func("main", 4);
    if (func) {
        exec_node = func->stmt;
        if (func->locals) stack_malloc(func->locals->offset);
        execute_function_stmt();
    } else
        error_at(exec_node->tok_str, "there is not main function");
}

void execute_call_func(Node *node) {
    long long int val;
    Node *execed_node = exec_node;

    val = execute_function(node);

    stack_push(val);
    exec_node = execed_node;
}

long long int execute_function(Node *node) {
    Node *arg_node;
    Var *arg_var;
    long long int offset;
    long long int val;
    long long int arg[100];
    int i;
    
    // 呼び出し元argをpush (headからpush)
    arg_node = node->args;
    for (i = 0; i < 100 && (arg_node = arg_node->next_stmt); i++) {
        execute_cal(arg_node);
        arg[i] = stack_pop();
    }
    
    // RBPを更新してstackの領域確保
    call_func_stack();
    if (node->func->locals) stack_malloc(node->func->locals->offset);
    
    // 関数でargに代入
    arg_var = node->func->args;
    for (i = i - 1; arg_var; i--) {
        offset = (long long int)get_addr(0, arg_var->offset);
        val = arg[i];
        stack_set(offset, val);
        arg_var = arg_var->next;
    }
    
    // 関数のstmtを実行
    exec_node = node->func->stmt;
    execute_function_stmt();
    
    // 戻り値取得
    if (exec_node && exec_node->kind == ND_RETURN && exec_node->lhs)
        execute_cal(exec_node->lhs);
    else
        stack_push(0);
    val = stack_pop();

    // rbp, rspを戻す
    ret_func_stack();
    return val;
}

void set_next_exec_node() {
    switch (exec_node->kind) {
        case ND_WHILE:
        case ND_FOR:
        case ND_IF:
        case ND_ELSE_IF:
        case ND_ELSE:
            exec_node = exec_node->next_stmt;
            break;
        case ND_CONTINUE:
            exec_node = exec_node->jump_to;
            break;
        case ND_BREAK:
            exec_node = *exec_node->break_to;
            break;
        default:
            if (exec_node->jump_to)
                exec_node = exec_node->jump_to;
            else
                exec_node = exec_node->next_stmt;
    }
}

void execute_function_stmt() {
    exec_node = exec_node->next_stmt;
    
    while (exec_node) {
        if (exec_node->kind == ND_RETURN) 
            break;

        execute_stmt();

        set_next_exec_node();
    }
}

void execute_while() {
    execute_cal(exec_node->lhs);
    long long int a = stack_pop();
    if (!a)
        exec_node = exec_node->jump_to;
}

void execute_for() {
    if (control_infos->loop == 0) {
        if (exec_node->lhs) execute_cal(exec_node->lhs);
    } else {
        if (exec_node->rhs) {
            execute_cal(exec_node->rhs);
            stack_pop();
        }
    }

    if (exec_node->mhs) 
        execute_cal(exec_node->mhs);
    else
        stack_push(1);

    control_infos->loop++;
    if (!stack_pop()) {
        exec_node = exec_node->jump_to;
        delete_control_infos();
    }
}

void execute_if() {
    if (exec_node->lhs)
        execute_cal(exec_node->lhs);
    else 
        error_at(exec_node->tok_str, "if節の条件式がありません");

    if (!exec_node->next_if_else)
        delete_control_infos();

    if (stack_pop()) {
        if (exec_node->next_if_else) control_infos->true = 1;
    } else 
        exec_node = exec_node->jump_to;
}

void execute_else_if() {
    if (control_infos->true)
        stack_push(0);
    else if (exec_node->lhs)
        execute_cal(exec_node->lhs);
    else
        error_at(exec_node->tok_str, "else if節の条件式がありません");

    if (!exec_node->next_if_else)
        delete_control_infos();

    if (stack_pop()) {
        if (exec_node->next_if_else) control_infos->true = 1;
    } else
        exec_node = exec_node->jump_to;
}

void execute_else() {
    if (control_infos->true)
        stack_push(0);
    else
        stack_push(1);
    
    if (!stack_pop())
        exec_node = exec_node->jump_to;
    delete_control_infos();
}

void execute_switch() {
    long long int a;
    Node *case_node;
    execute_cal(exec_node->lhs);
    a = stack_pop();

    case_node = exec_node->next_if_else;
    while (case_node) {
        if (case_node->kind == ND_DEFAULT) {
            exec_node = case_node;
            break;
        }
        execute_cal(case_node->lhs);
        if (a == stack_pop()) {
            exec_node = case_node;
            break;
        }
        case_node = case_node->next_if_else;
    }

    if (!case_node)
        exec_node = exec_node->jump_to;
}

void execute_stmt() {
    ControlInfo *control_info;
    
    switch (exec_node->kind) {
        case ND_RETURN:
            return;
        case ND_FOR_START:
            control_info = calloc(1, sizeof(ControlInfo));
            control_info->before = control_infos;
            control_info->node = exec_node->next_stmt;
            control_infos = control_info;
            return;
        case ND_WHILE:
            printf("while %p", exec_node);
            execute_while();
            return;
        case ND_FOR:
            if (control_infos->node->kind != ND_FOR)
                error_at(exec_node->tok_str, "forのControlInfoではありません");

            execute_for();
            return;
        case ND_IF:
            control_info = calloc(1, sizeof(ControlInfo));
            control_info->before = control_infos;
            control_info->node = exec_node;
            control_infos = control_info;
            execute_if();
            return;
        case ND_ELSE_IF:
            if (control_infos->node->kind != ND_IF)
                error_at(exec_node->tok_str, "else ifのControlInfoではありません");

            execute_else_if();
            return;
        case ND_ELSE:
            if (control_infos->node->kind != ND_IF)
                error_at(exec_node->tok_str, "elseのControlInfoではありません");
                
            execute_else();
            return;
        case ND_SWITCH:
            execute_switch();
            return;
        case ND_CASE:
            return;
        case ND_DEFAULT:
            return;
        case ND_CONTINUE:
            return;
        case ND_BREAK:
            return;
        case ND_BLOCK:
            return;
        case ND_BLOCK_END:
            return;
        case ND_CONTROL_END:
            return;
    }
    execute_cal(exec_node);
    stack_pop();
}

void execute_cal(Node *node) {
    long long int a;
    long long int b;
    long long int c;
    long long int *p;
    long long int offset;
    // printf("%d\n", node->kind);
    
    switch (node->kind) {
        case ND_ASSIGN:
            get_offset(node->lhs);
            offset = stack_pop();
            execute_cal(node->rhs);
            c = stack_pop();
            break;
        case ND_ADD:
            execute_cal(node->lhs);
            execute_cal(node->rhs);
            b = stack_pop();
            a = stack_pop();
            c = a + b;
            break;
        case ND_SUB:
            execute_cal(node->lhs);
            execute_cal(node->rhs);
            b = stack_pop();
            a = stack_pop();
            c = a - b;
            break;
        case ND_MUL:
            execute_cal(node->lhs);
            execute_cal(node->rhs);
            b = stack_pop();
            a = stack_pop();
            c = a * b;
            //printf("mul %lld * %lld", a,b);
            break;
        case ND_DIV:
            execute_cal(node->lhs);
            execute_cal(node->rhs);
            b = stack_pop();
            a = stack_pop();
            c = a / b;
            break;
        case ND_MOD:
            execute_cal(node->lhs);
            execute_cal(node->rhs);
            b = stack_pop();
            a = stack_pop();
            c = a % b;
            break;
        case ND_LOGICAL_ADD:
            execute_cal(node->lhs);
            b = stack_pop();
            if (b) {
                c = 1;
            } else {
                execute_cal(node->rhs);
                c = stack_pop();
            }
            break;
        case ND_LOGICAL_AND:
            execute_cal(node->lhs);
            b = stack_pop();
            if (!b) {
                c = 0;
            } else {
                execute_cal(node->rhs);
                c = stack_pop();
            }
            break;
        case ND_EQ:
            execute_cal(node->lhs);
            execute_cal(node->rhs);
            b = stack_pop();
            a = stack_pop();
            c = a == b;
            break;
        case ND_NE:
            execute_cal(node->lhs);
            execute_cal(node->rhs);
            b = stack_pop();
            a = stack_pop();
            c = a != b;
            break;
        case ND_LT:
            execute_cal(node->lhs);
            execute_cal(node->rhs);
            b = stack_pop();
            a = stack_pop();
            c = a < b;
            break;
        case ND_LE:
            execute_cal(node->lhs);
            execute_cal(node->rhs);
            b = stack_pop();
            a = stack_pop();
            c = a <= b;
            break;
        case ND_NOT:
            execute_cal(node->lhs);
            a = stack_pop();
            c = !a;
            break;
        case ND_LVAR:
            c = (long long int)get_addr(node->var->glb_var, node->var->offset);
            if (!node->access)
                c = stack_get(c);
            break;
        case ND_NUM:
            c = node->val;
            break;
        case ND_CHAR:
            c = node->val;
            break;
        case ND_CALL_FUNC:
            execute_call_func(node);
            c = stack_pop();
            break;
        case ND_VAR_ADD:
            offset = (long long int)get_addr(node->lhs->var->glb_var, node->lhs->var->offset);
            c = stack_get(offset);
            break;
        case ND_VAR_SUB:
            offset = (long long int)get_addr(node->lhs->var->glb_var, node->lhs->var->offset);
            c = stack_get(offset);
            break;
        case ND_PRINTF:
            execute_printf(node);
            stack_push(0);
            return;
        case ND_SCANF:
            execute_scanf(node);
            stack_push(0);
            return;
        case ND_MALLOC:
            c = (long long int)execute_malloc(node);
            break;
        case ND_CALLOC:
            c = (long long int)execute_calloc(node);
            break;
        case ND_FREE:
            execute_free(node);
            stack_push(0);
        case ND_STR_PTR:
            stack_push( (long long int)node->str );
            return;
        case ND_CHAR:
            stack_push(node->val);
            return;
        case ND_ADDR:
            get_offset(node->lhs);
            offset = stack_pop();
            stack_push( offset );
            return;
        case ND_DEREF:
            execute_cal(node->lhs);
            p = stack_pop();
            
            if (node->access) c = (long long int)p;
            else if (p < stack_address || stack_address + stack_size * 8 < p)
                error_at(exec_node->tok_str, "segmentation fault.");
                
            else c = *p;
            break;
        case ND_INDEX:
            execute_cal(node->lhs);
            execute_cal(node->rhs);
            b = stack_pop();
            a = stack_pop();
            c = a + b * 8;
            if (!node->access)
                c = stack_get( c );
            break;
        case ND_MEMBAR:
            c = (long long int)node->var->offset;
            stack_push( c * 8 );
            return;
        case ND_MEMBAR_ACCESS:
            execute_cal(node->lhs);
            execute_cal(node->rhs);
            b = stack_pop();
            a = stack_pop();
            c = a + b;
            if (!node->access)
                c = stack_get(c);
            break;
        case ND_CAST:
            execute_cal(node->lhs);
            c = stack_pop();
            switch (node->cast->ty) {
                case INT:
                    c = (int) c;
                    break;
                case LONG_LONG_INT:
                    c = (long long int) c;
                    break;
                case CHAR:
                    c = (char) c;
                    break;
                case PTR:
                    c = (long long int) c;
                    break;
                default:
                    error_at(exec_node->tok_str, "can't cast to it type");
            }
            stack_push(c);
            return;
        case ND_NULL:
            c = 0;
            break;
        default:
            error_at(exec_node->tok_str, "error in interpreter");
    }
    
    switch (node->kind) {
        case ND_ASSIGN:
            stack_set(offset, c);
            break;
        case ND_VAR_ADD:
            c++;
            stack_set(offset, c);
            c--;
            break;
        case ND_VAR_SUB:
            c--;
            stack_set(offset, c);
            c++;
            break;
    }
    
    switch (node->type->ty) {
        case VOID:
            c = 0;
            break;
        case CHAR:
            c = (char) c;
            break;
        case INT:
            c = (int) c;
            break;
        case LONG_LONG_INT:
        case PTR:
        case ARRAY:
        case STRUCT:
            c = (long long int) c;
            break;
        default:
            error_at(exec_node->tok_str, "error in interpreter");
    }
    stack_push(c);
}

// -------------- execute printf scanf -------------- //

// -------------- printf 実行 引数6個まで -------------- //
void execute_printf(Node *node) {
    Node *arg;
    int argc_ = node->argc;
    long long int arg1;
    long long int arg2;
    long long int arg3;
    long long int arg4;
    long long int arg5;
    long long int arg6;
    if (argc_ > 6)
        error_at(exec_node->tok_str, "printfの引数は6個以下");
    else if (argc_ == 0)
        error_at(exec_node->tok_str, "printfの引数が0個です");

    arg = node->args->next_stmt;
    if (argc_ > 0) {
        execute_cal(arg);
        arg1 = stack_pop();
        arg = arg->next_stmt;
        if (argc_ == 1) 
            printf(arg1);
    }
    if (argc_ > 1) {
        execute_cal(arg);
        arg2 = stack_pop();
        arg = arg->next_stmt;
        if (argc_ == 2) 
            printf(arg1, arg2);
    }
    if (argc_ > 2) {
        execute_cal(arg);
        arg3 = stack_pop();
        arg = arg->next_stmt;
        if (argc_ == 3) 
            printf(arg1, arg2, arg3);
    }
    if (argc_ > 3) {
        execute_cal(arg);
        arg4 = stack_pop();
        arg = arg->next_stmt;
        if (argc_ == 4) 
            printf(arg1, arg2, arg3, arg4);
    }
    if (argc_ > 4) {
        execute_cal(arg);
        arg5 = stack_pop();
        arg = arg->next_stmt;
        if (argc_ == 5) 
            printf(arg1, arg2, arg3, arg4, arg5);
    }
    if (argc_ > 5) {
        execute_cal(arg);
        arg6 = stack_pop();
        arg = arg->next_stmt;
        if (argc_ == 6) 
            printf(arg1, arg2, arg3, arg4, arg5, arg6);
    }
}

// -------------- scanf 実行 引数6個まで -------------- //
void execute_scanf(Node *node) {
    Node *arg;
    int argc_ = node->argc;
    long long int arg1;
    long long int arg2;
    long long int arg3;
    long long int arg4;
    long long int arg5;
    long long int arg6;
    if (argc_ > 6)
        error_at(exec_node->tok_str, "scanfの引数は6個以下");
    else if (argc_ <= 1)
        error_at(exec_node->tok_str, "scanffの引数が足りません");

    arg = node->args->next_stmt;
    if (argc_ > 0) {
        execute_cal(arg);
        arg1 = stack_pop();
        arg = arg->next_stmt;
        if (argc_ == 1) 
            scanf(arg1);
    }
    if (argc_ > 1) {
        execute_cal(arg);
        arg2 = stack_pop();
        arg = arg->next_stmt;
        if (argc_ == 2) 
            scanf(arg1, arg2);
    }
    if (argc_ > 2) {
        execute_cal(arg);
        arg3 = stack_pop();
        arg = arg->next_stmt;
        if (argc_ == 3) 
            scanf(arg1, arg2, arg3);
    }
    if (argc_ > 3) {
        execute_cal(arg);
        arg4 = stack_pop();
        arg = arg->next_stmt;
        if (argc_ == 4) 
            scanf(arg1, arg2, arg3, arg4);
    }
    if (argc_ > 4) {
        execute_cal(arg);
        arg5 = stack_pop();
        arg = arg->next_stmt;
        if (argc_ == 5) 
            scanf(arg1, arg2, arg3, arg4, arg5);
    }
    if (argc_ > 5) {
        execute_cal(arg);
        arg6 = stack_pop();
        arg = arg->next_stmt;
        if (argc_ == 6) 
            scanf(arg1, arg2, arg3, arg4, arg5, arg6);
    }
}

// -------------- malloc -------------- //
long long int *execute_malloc(Node *node) {
    Node *arg;
    int argc_ = node->argc;
    long long int arg1;

    if (argc_ != 1)
        error_at(exec_node->tok_str, "malloc arguments must be 1 arguments.");

    arg = node->args->next_stmt;
    execute_cal(arg);
    arg1 = stack_pop();

    return heap_alloc(arg1);
}

// -------------- calloc -------------- //
long long int *execute_calloc(Node *node) {
    Node *arg;
    int argc_ = node->argc;
    long long int arg1;
    long long int arg2;

    if (argc_ != 2)
        error_at(exec_node->tok_str, "malloc arguments must be 2 arguments.");

    arg = node->args->next_stmt;
    execute_cal(arg);
    arg1 = stack_pop();
    arg = arg->next_stmt;

    arg = node->args->next_stmt;
    execute_cal(arg);
    arg2 = stack_pop();
    
    return heap_alloc(arg1 * arg2);
}

// -------------- free -------------- //
void execute_free(Node *node) {
    Node *arg;
    int argc_ = node->argc;
    long long int arg1;

    if (argc_ != 1)
        error_at(exec_node->tok_str, "free argument must be 1 argument");

    arg = node->args->next_stmt;
    execute_cal(arg);
    arg1 = stack_pop();

    dealloc(arg1);
}