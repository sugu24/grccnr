#include "cinter.gh"

int get_stack_size(VarType *type) {
    int res = 0;
    Var *var;
    switch (type->ty) {
        case INT: 
            res = 1;
            break;
        case LONG_LONG_INT:
            res = 1;
            break;
        case CHAR: 
            res = 1;
            break;
        case VOID:
            res = 1;
            break;
        case PTR:
            res = 1;
            break;
        case ARRAY:
            res = type->array_size * get_stack_size(type->ptr_to);
            break;
        case STRUCT:
            for (var = type->struct_p->membar; var; var = var->next)
                res += get_stack_size(var->type);
            break;
        default:
            printf("型が処理できません type = %d\n", type->ty);
            exit(1);
    }
    return res;
}

// 変数のサイズを返す
// get_size呼ぶときは*を処理した後
// interpreterなのでlong long intのみでlong long int は1
long long int get_size(VarType *type) {
    int res = 0;
    Var *var;
    
    switch (type->ty) {
        case INT: 
            res = 4;
            break;
        case LONG_LONG_INT:
            res = 8;
            break;
        case CHAR: 
            res = 1;
            break;
        case VOID:
            res = 1;
            break;
        case PTR:
            res = 8;
            break;
        case ARRAY:
            res = type->array_size * get_size(type->ptr_to);
            break;
        case STRUCT:
            for (var = type->struct_p->membar; var; var = var->next)
                res += get_size(var->type);
            break;
        default:
            printf("型が処理できません\n");
            exit(1);
    }
    return res;
}

int calcuratable(VarType *lhs, VarType *rhs) {
    if (lhs->ty == ARRAY || lhs->ty == PTR || lhs->ty == STRUCT)
        return 0;
    if (rhs->ty == ARRAY || rhs->ty == PTR || rhs->ty == STRUCT)
        return 0;
    return 1;
}

int returnable(VarType *ltype, VarType *rtype) {
    while (1) {
        if (!(ltype->ty != 1 && rtype->ty != 1 && ltype->ty < 4 && rtype->ty < 4) &&
            ltype->ty != rtype->ty)
            return 0;
        
        if (ltype->ptr_to && rtype->ptr_to) {
            ltype = ltype->ptr_to;
            rtype = rtype->ptr_to;
        } else if (!ltype->ptr_to && !rtype->ptr_to)
            return 1;
        else
            return 0;
    }
}

VarType *AST_type(int ch, Node *node) {
    VarType *lhs_var_type;
    VarType *rhs_var_type;
    VarType *var_type;
    long long int lsize;
    long long int rsize;
    
    switch (node->kind) {
        case ND_ADD:
            lhs_var_type = AST_type(ch, node->lhs);
            rhs_var_type = AST_type(ch, node->rhs);
            
            if (get_size(lhs_var_type) >= get_size(rhs_var_type))
                var_type = lhs_var_type;
            else
                var_type = rhs_var_type;
                
            if (ch) {
                if ( (lhs_var_type->ty == PTR || lhs_var_type->ty == ARRAY) &&
                     (rhs_var_type->ty == INT || rhs_var_type->ty == CHAR || rhs_var_type->ty == LONG_LONG_INT)) {
                    node->rhs->type = rhs_var_type;
                    node->rhs = new_binary(ND_MUL, node->rhs, new_num(get_stack_size(var_type->ptr_to)*8));
                    node->rhs->rhs->type = calloc(1, sizeof(VarType));
                    node->rhs->rhs->type->ty = LONG_LONG_INT;
                    node->rhs->type = calloc(1, sizeof(VarType));
                    node->rhs->type->ty = LONG_LONG_INT;
                }
                else if ( (rhs_var_type->ty == PTR || lhs_var_type->ty == ARRAY) &&
                     (lhs_var_type->ty == INT || lhs_var_type->ty == CHAR || lhs_var_type->ty == LONG_LONG_INT)) {
                    node->lhs->type = lhs_var_type;
                    node->rhs = new_binary(ND_MUL, node->rhs, new_num(get_stack_size(var_type->ptr_to)*8));
                    node->lhs->rhs->type = calloc(1, sizeof(VarType));
                    node->lhs->rhs->type->ty = LONG_LONG_INT;
                    node->lhs->type = calloc(1, sizeof(VarType));
                    node->lhs->type->ty = LONG_LONG_INT;
                }
            }
            
            break;
        case ND_SUB:
            lhs_var_type = AST_type(ch, node->lhs);
            rhs_var_type = AST_type(ch, node->rhs);
            if (get_size(lhs_var_type) >= get_size(rhs_var_type))
                var_type = lhs_var_type;
            else
                var_type = rhs_var_type;
            
            if (ch) {
                if ( (lhs_var_type->ty == PTR || lhs_var_type->ty == ARRAY) &&
                     (rhs_var_type->ty == INT || rhs_var_type->ty == CHAR || rhs_var_type->ty == LONG_LONG_INT)) {
                    node->rhs->type = rhs_var_type;
                    node->rhs = new_binary(ND_MUL, node->rhs, new_num(get_stack_size(var_type->ptr_to)*8));
                    node->rhs->rhs->type = calloc(1, sizeof(VarType));
                    node->rhs->rhs->type->ty = LONG_LONG_INT;
                    node->rhs->type = calloc(1, sizeof(VarType));
                    node->rhs->type->ty = LONG_LONG_INT;
                }
                else if ( (rhs_var_type->ty == PTR || lhs_var_type->ty == ARRAY) &&
                     (lhs_var_type->ty == INT || lhs_var_type->ty == CHAR || lhs_var_type->ty == LONG_LONG_INT)) {
                    node->lhs->type = lhs_var_type;
                    node->rhs = new_binary(ND_MUL, node->rhs, new_num(get_stack_size(var_type->ptr_to)*8));
                    node->lhs->rhs->type = calloc(1, sizeof(VarType));
                    node->lhs->rhs->type->ty = LONG_LONG_INT;
                    node->lhs->type = calloc(1, sizeof(VarType));
                    node->lhs->type->ty = LONG_LONG_INT;
                }
            }
            break;
        case ND_MUL:
            lhs_var_type = AST_type(ch, node->lhs);
            rhs_var_type = AST_type(ch, node->rhs);
            if (!calcuratable(lhs_var_type, rhs_var_type)) {
                printf("is not calcuratable\n");
                exit(1);
            }
            if (get_size(lhs_var_type) >= get_size(rhs_var_type))
                var_type = lhs_var_type;
            else
                var_type = rhs_var_type;
            break;
        case ND_DIV:
            lhs_var_type = AST_type(ch, node->lhs);
            rhs_var_type = AST_type(ch, node->rhs);
            if (!calcuratable(lhs_var_type, rhs_var_type)) {
                printf("is not calcuratable\n");
                exit(1);
            }
            if (get_size(lhs_var_type) >= get_size(rhs_var_type))
                var_type = lhs_var_type;
            else
                var_type = rhs_var_type;
            break;
        case ND_MOD:
            lhs_var_type = AST_type(ch, node->lhs);
            rhs_var_type = AST_type(ch, node->rhs);
            if (!calcuratable(lhs_var_type, rhs_var_type)) {
                printf("is not calcuratable\n");
                exit(1);
            }
            if (get_size(lhs_var_type) >= get_size(rhs_var_type))
                var_type = lhs_var_type;
            else
                var_type = rhs_var_type;
            break;
        case ND_LOGICAL_ADD:
        case ND_LOGICAL_AND:
            AST_type(ch, node->lhs);
            AST_type(ch, node->rhs);
            var_type = calloc(1, sizeof(VarType));
            var_type->ty = INT;
            break;
        case ND_NUM:
            var_type = calloc(1, sizeof(VarType));
            var_type->ty = LONG_LONG_INT;
            break;
        case ND_CHAR:
            var_type = calloc(1, sizeof(VarType));
            var_type->ty = CHAR;
            break;
        case ND_NULL:
            var_type = calloc(1, sizeof(VarType));
            var_type->ty = PTR;
            var_type->ptr_to = calloc(1, sizeof(VarType));
            var_type->ptr_to->ty = VOID;
            break;
        case ND_STR:
            var_type = calloc(1, sizeof(VarType));
            var_type->ty = ARRAY;
            var_type->array_size = node->var->len;
            var_type->ptr_to = calloc(1, sizeof(VarType));
            var_type->ptr_to->ty = CHAR;
            break;
        case ND_STR_PTR:
            var_type = calloc(1, sizeof(VarType));
            var_type->ty = PTR;
            var_type->ptr_to = calloc(1, sizeof(VarType));
            var_type->ptr_to->ty = CHAR;
            break;
        case ND_NULL:
            var_type = calloc(1, sizeof(VarType));
            var_type->ty = PTR;
            var_type->ptr_to = calloc(1, sizeof(VarType));
            var_type->ptr_to->ty = VOID;
            break;
        case ND_ADDR:
            var_type = calloc(1, sizeof(VarType));
            var_type->ty = PTR;
            var_type->ptr_to = AST_type(ch, node->lhs);
            break;
        case ND_DEREF:
            var_type = AST_type(ch, node->lhs);
            if (var_type->ty == ARRAY || var_type->ty == PTR) {
                var_type = var_type->ptr_to;
                if (var_type->ty == ARRAY || var_type->ty == PTR) node->access = 1;
            } else {
                printf("var is not pointer\n");
                exit(1);
            }
            break;
        case ND_INDEX:
            var_type = AST_type(ch, node->lhs);
            AST_type(ch, node->rhs);
            if (var_type->ty == STRUCT || var_type->ty == ARRAY || var_type->ty == PTR)
                var_type = var_type->ptr_to;
            else {
                printf("[index] is unexpected\n");
                exit(1);
            }
            break;
        case ND_MEMBAR_ACCESS:
            AST_type(ch, node->lhs);
            var_type = AST_type(ch, node->rhs);
            break;
        case ND_MEMBAR:
            var_type = node->var->type;
            break;
        case ND_EQ:
        case ND_NE:
        case ND_LT:
        case ND_LE:
            AST_type(ch, node->lhs);
            AST_type(ch, node->rhs);
            var_type = calloc(1, sizeof(VarType));
            var_type->ty = INT;
            break;
        case ND_NOT:
            AST_type(ch, node->lhs);
            var_type = calloc(1, sizeof(VarType));
            var_type->ty = INT;
            break;
        case ND_ASSIGN:
            lhs_var_type = AST_type(ch, node->lhs);
            rhs_var_type = AST_type(ch, node->rhs);
            if (rhs_var_type->ty == VOID) {
                printf("var is not void\n");
                exit(1);
            }
            lsize = get_size(lhs_var_type);
            rsize = get_size(rhs_var_type);
            if (rsize > 8 && lsize < rsize) {
                printf("lhs size is less than rhs size\n");
                exit(1);
            } else if (lsize < rsize)
                node->rhs->type = lhs_var_type;
            
            var_type = lhs_var_type;
            break;
        case ND_VAR_ADD:
        case ND_VAR_SUB:
            var_type = AST_type(ch, node->lhs);
            break;
        case ND_LVAR:
            var_type = node->var->type;
            if (var_type->ty == ARRAY)
                node->access = 1;
            break;
        case ND_MEMBAR:
            var_type = node->var->type;
            if (var_type->ty == ARRAY)
                node->access = 1;
            break;
        case ND_CAST:
            var_type = AST_type(ch, node->lhs);
            if (var_type->ty == PTR && node->cast->ty != LONG_LONG_INT)
                error_at(token->str, "cast from pointer to defferent size");
            else if (node->cast->ty == VOID)
                error_at(token->str, "void value not ignored as it ought to be");
            return node->cast;
        case ND_RETURN:
            if (node->lhs)
                var_type = AST_type(ch, node->lhs);
            else {
                var_type = calloc(1, sizeof(VarType));
                var_type->ty = VOID;
            }
            break;
        case ND_IF:
        case ND_ELSE_IF:
        case ND_ELSE:
        case ND_WHILE:
        case ND_FOR:
        case ND_CONTINUE:
        case ND_BREAK:
        case ND_SWITCH:
        case ND_CASE:
        case ND_DEFAULT:
        case ND_BLOCK:
            printf("AST_type can't evaluate\n");
            exit(1);
        case ND_CALL_FUNC:
            var_type = node->func->type->type;
            break;
        case ND_PRINTF:
            var_type = calloc(1, sizeof(VarType));
            var_type->ty = INT;
            break;
        case ND_SCANF:
            var_type = calloc(1, sizeof(VarType));
            var_type->ty = INT;
            break;
        case ND_CALLOC:
        case ND_MALLOC:
            var_type = calloc(1, sizeof(VarType));
            var_type->ty = PTR;
            var_type->ptr_to = calloc(1, sizeof(VarType));
            var_type->ptr_to->ty = VOID;
            break;
        case ND_FREE:
            var_type = calloc(1, sizeof(VarType));
            var_type->ty = VOID;
            break;
        default:
            printf("kind is not unexpected\n");
            exit(1);
    }
    
    node->type = var_type;
    return var_type;
}